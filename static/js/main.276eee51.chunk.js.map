{"version":3,"sources":["Progress.js","Validate.js","App.js","serviceWorker.js","index.js"],"names":["ProgressBar","props","react_default","a","createElement","Spinner","color","validateForm","data","key","hasOwnProperty","element","document","getElementById","concat","style","display","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","sol","camera","errorMessage","result","evt","preventDefault","target","setState","defineProperty","name","value","e","marginTop","validate","Axios","get","photoSearch","status","message","photos","map","index","id","className","Card","CardImg","top","width","src","img_src","alt","_this2","Form","textAlign","Progress","FormGroup","row","Label","for","sm","Col","Input","type","onChange","handleChange","defaultValue","selected","size","offset","onClick","onSubmit","renderResult","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.276eee51.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Spinner } from 'reactstrap';\r\n\r\nconst ProgressBar = (props) => {\r\n  return (\r\n    <div>\r\n      <Spinner color=\"warning\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;","export const validateForm = (data) => {\r\n    for (const key in data) {\r\n        if (data.hasOwnProperty(key)) {\r\n            const element = data[key];\r\n            if(!element || (key === \"sol\" && element < 0) || (key === \"sol\" && element > 1000) || (key === \"camera\" && element === \"Select a camera\")) {\r\n                return document.getElementById(`${key}-error`).style.display='block'\r\n            } else {\r\n                document.getElementById(`${key}-error`).style.display='none'\r\n            }\r\n        }\r\n    }\r\n}","import React from 'react';\nimport { Col, Form, FormGroup, Label, Input, Card, CardImg } from 'reactstrap';\nimport Axios from 'axios';\nimport './App.css';\nimport Progress from './Progress';\nimport { validateForm } from './Validate';\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sol: 0,\n      camera: 'fhaz',\n      errorMessage: '',\n      result: []\n    };\n  }\n\n  handleChange(evt) {\n    evt.preventDefault();\n    let target = evt.target;\n    this.setState({\n      [target.name]: target.value\n    });\n  }\n\n  async onSubmit(e) {\n    e.preventDefault();\n    document.getElementById(\"field-error\").style.display = \"none\";\n    document.getElementById(\"spinner\").style.display = \"block\";\n    document.getElementById(\"mars-container\").style.marginTop = \"0px\";\n    document.getElementById(\"photos\").style.display = \"none\";\n    const target = this.state;\n    let data = {\n      sol: target.sol,\n      camera: target.camera\n    }\n\n    const validate = await validateForm(data);\n\n    if (!!validate) {\n        document.getElementById(\"spinner\").style.display = \"none\";\n        return validate\n    }else{\n      \n        const photoSearch = await Axios.get(`https://larastart-eph.herokuapp.com/api/v1/search?sol=${data.sol}&camera=${data.camera}`);\n        \n        if(photoSearch.status === 200){\n          document.getElementById(\"spinner\").style.display = \"none\";\n          if(photoSearch.data.message === \"No photos\"){\n            document.getElementById(\"field-error\").style.display = \"block\";\n            this.setState({\n              errorMessage: 'No image for the selected options'\n            })\n          }else{\n            document.getElementById(\"mars-container\").style.marginTop = \"-50px\";\n            this.setState({\n              result: photoSearch.data.photos\n            });\n            document.getElementById(\"photos\").style.display = \"block\";\n          }\n          \n        }else{\n          document.getElementById(\"spinner\").style.display = \"none\";\n          document.getElementById(\"field-error\").style.display = \"block\";\n          this.setState({\n              errorMessage: 'Request was not successful, please try again'\n          })\n        }\n    }\n  }\n\n  renderResult() {\n    return this.state.result.map((data, index) => {\n       return (\n        <div key={data.id} className=\"col-sm-4 card-image\">\n          <Card>\n            <CardImg top width=\"100%\" src={data.img_src} alt=\"mars image\" />\n          </Card>\n        </div>\n       )\n    })\n }\n\n  render(){\n  \n    let state = this.state,\n    errorMessage = state.errorMessage;\n  return (\n    <div className=\"App\">\n      <section className=\"mars-container\" id=\"mars-container\">\n        <div className=\"wrap-mars\">\n          <h4>Mars Photo Search</h4>\n        <Form className=\"mars-form\">\n          <span id=\"spinner\" style={{display: \"none\", textAlign: \"center\"}}><Progress/></span>\n          <span className=\"text-danger\" id=\"field-error\">{errorMessage}</span>\n          <FormGroup row>\n            <Label for=\"sol\" sm={3}>Sol</Label>\n            <Col sm={9}>\n              <Input\n              type=\"text\"\n                name=\"sol\"\n                id=\"sol\" \n                onChange={evt => this.handleChange(evt)}\n                value = \"0\"\n                />\n              <span id=\"sol-error\" style={{display: \"none\", color: \"red\"}}>Enter a number between 0 and 1000</span>\n            </Col>\n          </FormGroup>\n          <FormGroup row>\n            <Label for=\"camera\" sm={3}>Camera</Label>\n            <Col sm={9}>\n              <Input type=\"select\" name=\"camera\" id=\"camera\" onChange={evt => this.handleChange(evt)}>\n                <option defaultValue>Select a camera</option>\n                <option selected value=\"FHAZ\">Front Hazard Avoidance Camera</option>\n                <option value=\"RHAZ\">Rear Hazard Avoidance Camera</option>\n                <option value=\"MAST\">Mast Camera</option>\n                <option value=\"CHEMCAM\">Chemistry and Camera Complex</option>\n                <option value=\"MAHLI\">Mars Hand Lens Imager</option>\n                <option value=\"MARDI\">Mars Descent Imager</option>\n                <option value=\"NAVCAM\">Navigation Camera</option>\n              </Input>\n                <span id=\"camera-error\" style={{display: \"none\", color: \"red\"}}>Select a camera</span>\n            </Col>\n          </FormGroup>\n          \n          <FormGroup className=\"mars-btn\">\n            <Col sm={{ size: 10, offset: 2 }} className=\"wrap-btn\">\n              <div className=\"mars-btn-wrap\"></div>\n              <button className=\"mars-form-btn\" onClick={e => this.onSubmit(e)}>Find Photos</button>\n            </Col>\n          </FormGroup>\n        </Form>\n        </div>\n      </section>\n      <section id=\"photos\">\n        {this.renderResult()}\n      </section>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}